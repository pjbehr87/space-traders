/*
SpaceTraders API

Testing ContractsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stapi

import (
	"context"
	"testing"

	openapiclient "github.com/pjbehr87/space-traders/st-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_stapi_ContractsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContractsApiService AcceptContract", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.ContractsApi.AcceptContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsApiService DeliverContract", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.ContractsApi.DeliverContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsApiService FulfillContract", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.ContractsApi.FulfillContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsApiService GetContract", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.ContractsApi.GetContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsApiService GetContracts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContractsApi.GetContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
