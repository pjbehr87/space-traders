/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stapi

import (
	"encoding/json"
)

// checks if the ConnectedSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectedSystem{}

// ConnectedSystem struct for ConnectedSystem
type ConnectedSystem struct {
	// The symbol of the system.
	Symbol string `json:"symbol"`
	// The sector of this system.
	SectorSymbol string `json:"sectorSymbol"`
	Type SystemType `json:"type"`
	// The symbol of the faction that owns the connected jump gate in the system.
	FactionSymbol *string `json:"factionSymbol,omitempty"`
	// Position in the universe in the x axis.
	X int32 `json:"x"`
	// Position in the universe in the y axis.
	Y int32 `json:"y"`
	// The distance of this system to the connected Jump Gate.
	Distance int32 `json:"distance"`
}

// NewConnectedSystem instantiates a new ConnectedSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedSystem(symbol string, sectorSymbol string, type_ SystemType, x int32, y int32, distance int32) *ConnectedSystem {
	this := ConnectedSystem{}
	this.Symbol = symbol
	this.SectorSymbol = sectorSymbol
	this.Type = type_
	this.X = x
	this.Y = y
	this.Distance = distance
	return &this
}

// NewConnectedSystemWithDefaults instantiates a new ConnectedSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedSystemWithDefaults() *ConnectedSystem {
	this := ConnectedSystem{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *ConnectedSystem) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *ConnectedSystem) SetSymbol(v string) {
	o.Symbol = v
}

// GetSectorSymbol returns the SectorSymbol field value
func (o *ConnectedSystem) GetSectorSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SectorSymbol
}

// GetSectorSymbolOk returns a tuple with the SectorSymbol field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetSectorSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectorSymbol, true
}

// SetSectorSymbol sets field value
func (o *ConnectedSystem) SetSectorSymbol(v string) {
	o.SectorSymbol = v
}

// GetType returns the Type field value
func (o *ConnectedSystem) GetType() SystemType {
	if o == nil {
		var ret SystemType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetTypeOk() (*SystemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectedSystem) SetType(v SystemType) {
	o.Type = v
}

// GetFactionSymbol returns the FactionSymbol field value if set, zero value otherwise.
func (o *ConnectedSystem) GetFactionSymbol() string {
	if o == nil || IsNil(o.FactionSymbol) {
		var ret string
		return ret
	}
	return *o.FactionSymbol
}

// GetFactionSymbolOk returns a tuple with the FactionSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetFactionSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.FactionSymbol) {
		return nil, false
	}
	return o.FactionSymbol, true
}

// HasFactionSymbol returns a boolean if a field has been set.
func (o *ConnectedSystem) HasFactionSymbol() bool {
	if o != nil && !IsNil(o.FactionSymbol) {
		return true
	}

	return false
}

// SetFactionSymbol gets a reference to the given string and assigns it to the FactionSymbol field.
func (o *ConnectedSystem) SetFactionSymbol(v string) {
	o.FactionSymbol = &v
}

// GetX returns the X field value
func (o *ConnectedSystem) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *ConnectedSystem) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *ConnectedSystem) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *ConnectedSystem) SetY(v int32) {
	o.Y = v
}

// GetDistance returns the Distance field value
func (o *ConnectedSystem) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *ConnectedSystem) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *ConnectedSystem) SetDistance(v int32) {
	o.Distance = v
}

func (o ConnectedSystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectedSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["sectorSymbol"] = o.SectorSymbol
	toSerialize["type"] = o.Type
	if !IsNil(o.FactionSymbol) {
		toSerialize["factionSymbol"] = o.FactionSymbol
	}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["distance"] = o.Distance
	return toSerialize, nil
}

type NullableConnectedSystem struct {
	value *ConnectedSystem
	isSet bool
}

func (v NullableConnectedSystem) Get() *ConnectedSystem {
	return v.value
}

func (v *NullableConnectedSystem) Set(val *ConnectedSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedSystem(val *ConnectedSystem) *NullableConnectedSystem {
	return &NullableConnectedSystem{value: val, isSet: true}
}

func (v NullableConnectedSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


